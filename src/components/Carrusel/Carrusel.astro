---
import "./carrusel.css"
// Carousel.astro
export interface Slide {
  id: string | number;
  image: string;
  title: string;
  label?: string;
  labelLink?: string; // <--- PROPIEDAD AÑADIDA
  alt?: string;
}

export interface Props {
  slides: Slide[];
  height?: string;
  autoplay?: boolean;
  autoplayDelay?: number;
}

const { 
  slides, 
  height = "80vh", 
  autoplay = false, 
  autoplayDelay = 5000 
} = Astro.props;
---

<section class="carousel" style="height:83vh;">
  {slides.map((slide, index) => (
    <div 
      class={`carousel-slide ${index === 0 ? 'active' : ''}`}
      style={`background-image: url('${slide.image}');`}
      data-slide-index={index}
    >
      <div class="carousel-content">
        <h2>{slide.title}</h2>
        
        {/* --- SECCIÓN MODIFICADA --- */}
        {slide.label && (
          slide.labelLink ? (
            <a href={slide.labelLink} class="carousel-label-button">
              {slide.label}
            </a>
          ) : (
            <p class="carousel-label">{slide.label}</p>
          )
        )}
        {/* --- FIN DE SECCIÓN MODIFICADA --- */}

      </div>
    </div>
  ))}
  
  <!-- Flechas de navegación estilo INTEC - esquina inferior derecha -->
  <div class="carousel-navigation">
    <button class="carousel-prev" aria-label="Anterior"></button>
    <button class="carousel-next" aria-label="Siguiente"></button>
  </div>
  
  <!-- Indicadores de puntos (opcional) -->
  <div class="carousel-indicators">
    {slides.map((_, index) => (
      <button 
        class={`carousel-dot ${index === 0 ? 'active' : ''}`}
        data-slide={index}
        aria-label={`Ir al slide ${index + 1}`}
      ></button>
    ))}
  </div>
</section>

<script>
  // Tu script de JavaScript se mantiene exactamente igual.
  // No es necesario pegarlo aquí de nuevo para no alargar la respuesta.
  // Déjalo como lo tienes.
  class CarouselManager {
    constructor() {
      this.current = 0;
      this.slides = document.querySelectorAll('.carousel-slide');
      this.dots = document.querySelectorAll('.carousel-dot');
      this.total = this.slides.length;
      this.autoplayInterval = null;
      
      this.init();
    }
    
    init() {
      // Botones de navegación
      const nextBtn = document.querySelector('.carousel-next');
      const prevBtn = document.querySelector('.carousel-prev');
      
      if (nextBtn) nextBtn.addEventListener('click', () => this.next());
      if (prevBtn) prevBtn.addEventListener('click', () => this.prev());
      
      // Indicadores de puntos
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });
      
      // Autoplay si está habilitado
      const carousel = document.querySelector('.carousel');
      const autoplay = carousel?.dataset.autoplay === 'true';
      const delay = parseInt(carousel?.dataset.delay || '5000');
      
      if (autoplay) {
        this.startAutoplay(delay);
        
        // Pausar autoplay al hacer hover
        carousel?.addEventListener('mouseenter', () => this.stopAutoplay());
        carousel?.addEventListener('mouseleave', () => this.startAutoplay(delay));
      }
      
      // Navegación con teclado
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.prev();
        if (e.key === 'ArrowRight') this.next();
      });
      
      // Soporte para gestos táctiles
      this.setupTouchNavigation();
    }
    
    next() {
      this.goToSlide((this.current + 1) % this.total);
    }
    
    prev() {
      this.goToSlide((this.current - 1 + this.total) % this.total);
    }
    
    goToSlide(index) {
      // Remover clases activas
      this.slides[this.current]?.classList.remove('active');
      this.dots[this.current]?.classList.remove('active');
      
      // Actualizar índice actual
      this.current = index;
      
      // Agregar clases activas
      this.slides[this.current]?.classList.add('active');
      this.dots[this.current]?.classList.add('active');
    }
    
    startAutoplay(delay) {
      this.stopAutoplay();
      this.autoplayInterval = setInterval(() => this.next(), delay);
    }
    
    stopAutoplay() {
      if (this.autoplayInterval) {
        clearInterval(this.autoplayInterval);
        this.autoplayInterval = null;
      }
    }
    
    setupTouchNavigation() {
      let startX = 0;
      let endX = 0;
      
      const carousel = document.querySelector('.carousel');
      
      carousel?.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
      });
      
      carousel?.addEventListener('touchend', (e) => {
        endX = e.changedTouches[0].clientX;
        const diff = startX - endX;
        
        if (Math.abs(diff) > 50) { // Minimum swipe distance
          if (diff > 0) {
            this.next(); // Swipe left - next slide
          } else {
            this.prev(); // Swipe right - previous slide
          }
        }
      });
    }
  }
  
  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new CarouselManager();
  });
</script>
