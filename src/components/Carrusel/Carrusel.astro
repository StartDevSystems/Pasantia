---
import "./carrusel.css"

export interface Slide {
  id: string | number;
  image: string;
  title: string;
  label?: string;
  labelLink?: string; 
  alt?: string;
}

export interface Props {
  slides: Slide[];
  height?: string;
}

const { slides, height = "83vh" } = Astro.props;
---

<section class="carousel" style={`height: ${height};`}>
  <div class="carousel-slides-container">
    {slides.map((slide) => (
      <div class="carousel-slide" style={`background-image: url('${slide.image}');`}>
        <div class="carousel-content">
          <h2>{slide.title}</h2>
          {slide.label && (
            slide.labelLink ? (
              <a href={slide.labelLink} class="carousel-label-button">{slide.label}</a>
            ) : (
              <p class="carousel-label">{slide.label}</p>
            )
          )}
        </div>
      </div>
    ))}
  </div>
  
  <div class="carousel-navigation">
    <button class="carousel-prev" aria-label="Anterior"></button>
    <button class="carousel-next" aria-label="Siguiente"></button>
  </div>
  
  <div class="carousel-indicators">
    {slides.map((_, index) => (
      <button 
        class={`carousel-dot ${index === 0 ? 'active' : ''}`}
        data-slide={index}
        aria-label={`Ir al slide ${index + 1}`}
      ></button>
    ))}
  </div>
</section>

<script>
// =========================================================================
// SCRIPT CORREGIDO: SE HA ELIMINADO LA FUNCIONALIDAD DE ARRASTRE CON MOUSE
// =========================================================================
class CarouselManager {
    constructor() {
      this.current = 0;
      this.slides = document.querySelectorAll('.carousel-slide');
      this.dots = document.querySelectorAll('.carousel-dot');
      this.total = this.slides.length;
      this.container = document.querySelector('.carousel-slides-container');
      
      this.init();
    }
    
    init() {
      const nextBtn = document.querySelector('.carousel-next');
      const prevBtn = document.querySelector('.carousel-prev');
      
      if (nextBtn) nextBtn.addEventListener('click', () => this.next());
      if (prevBtn) prevBtn.addEventListener('click', () => this.prev());
      
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });
    }

    next() {
      const nextIndex = (this.current + 1) % this.total;
      this.goToSlide(nextIndex);
    }
    
    prev() {
      const prevIndex = (this.current - 1 + this.total) % this.total;
      this.goToSlide(prevIndex);
    }

    goToSlide(index) {
      if (!this.container || index < 0 || index >= this.total) return;
      this.container.style.transform = `translateX(-${index * 100}%)`;
      this.dots[this.current]?.classList.remove('active');
      this.dots[index]?.classList.add('active');
      this.current = index;
    }
}
  
document.addEventListener('DOMContentLoaded', () => {
    new CarouselManager();
});
</script>